using Cairo;
using GLib;
using Gtk;
using Gdk;

public class Main : Gtk.Window
{
	public static int main (string[] args) 
	{
		//Get GTK ready to rock and roll
    	Gtk.init (ref args);    	
    	var window = new Gtk.Window();
    	var board = new Board();

    	//Setup Our Window Properties
		window.title = "Vibbles!";
		window.set_position (Gtk.WindowPosition.CENTER);
		window.set_default_size (board.Width, board.Height);
		window.set_events(Gdk.EventMask.BUTTON_PRESS_MASK);
		
		//Wire Up Our Signals
		window.destroy.connect (Gtk.main_quit);
		window.key_press_event.connect ((event) => {
			board.OnKeyPress(event.keyval);
			return true;
			});

		//Kick Off The GTK Loop And Away We Go!
		window.add(board.OnDraw());
		window.icon = new Pixbuf.from_file ("vibbles.png");
		window.show_all ();
		board.InitGame();
		Gtk.main ();
		return 0;
	}
}

public class Board : DrawingArea
{	
	public int Width { get; set; }
	public int Height { get; set; }
	public int DotSize { get; set; }
	public int AllDots { get; set; }
	public int RandPos { get; set; }
	public int Delay { get; set; }
	private int[] X {get;set;}
	private int[] Y {get;set;}

	private bool Left{get;set;}
	private bool Right {get;set;}
	private bool Up {get;set;}
	private bool Down {get;set;}
	private bool InGame{get;set;}	
	public int Dots {get;set;}		

	public Pixbuf Dot { get; set; }
	public Pixbuf Head { get; set; }
	public Pixbuf Apple { get; set; }

	public int AppleX{get;set;}
	public int AppleY{get;set;}

	public Board()
	{
		Width = 300;
		Delay = 100;
		Height = 270;
		DotSize = 10;
		RandPos = 26;
		AllDots = Width * Height / (DotSize * DotSize);

		Left = false;
		Right = true;
		Up = false;
		Down = false;
		Dots = 3;	

		X = new int[]{AllDots};
		Y = new int[]{AllDots};
		InGame = true;    	
	}

	public bool OnTimer()
	{
		if (InGame)
		{
			CheckApple();
			CheckCollision();
			Move();
			queue_draw();
			return true;
		}
		else 
		{
			return false;
		}
	}

	public void InitGame()
	{
		LocateApple();
		//GLib.Timeout.add_seconds(5, OnTimer);
	}

	public DrawingArea OnDraw()
	{
		Dot = new Pixbuf.from_file("head.png");
		Head = new Pixbuf.from_file("dot.png");
		Apple = new Pixbuf.from_file("apple.png");

		var drawingArea = new DrawingArea();
		if (InGame)
			DrawObjects(drawingArea);
		else {
			GameOver(drawingArea);
		}
		return drawingArea;
	}

	public void DrawObjects(DrawingArea drawingArea)
	{
		drawingArea.draw.connect ((context) => {
			context.set_source_rgb(0, 0, 0); 
			context.paint();

			cairo_set_source_pixbuf(context, Apple, AppleX, AppleY);
			context.paint();

			cairo_set_source_pixbuf(context, Head, AllDots, AllDots);
			context.paint();


			for (int i = 0; i < Dots; i++)
			{
				if (i == 0)
				{
					cairo_set_source_pixbuf(context, Head, X[i], Y[i]);
					context.paint();
				// }
				// else 
				// {
					cairo_set_source_pixbuf(context, Dot, X[i], Y[i]);
					context.paint();
				}
			};
			return true;
		});
	}

	public void GameOver(DrawingArea drawingArea)
	{
		Gtk.main_quit();
	}

	public void CheckApple()
	{
		if (X[0] == AppleX && Y[0] == AppleX)
		{
			Dots = Dots + 1;
			LocateApple();
		}
	}

	public void Move()
	{
	  while (Dots > 0)
	  {
		  X[Dots] = X[(Dots - 1)];
		  Y[Dots] = Y[(Dots - 1)];
		  Dots = Dots - 1;
	  }

	 if (Left)
	 	X[0] -= DotSize;

	 if (Right)
	 	X[0] += DotSize;

	 if (Up)
	 	Y[0] -= DotSize;

	 if (Down)
	 	Y[0] += DotSize;
	}

	public void CheckCollision()
	{
		while (Dots > 0)
		{
			if (Dots > 4 && X[0] == X[Dots] && Y[0] == Y[Dots])
			{
				InGame = false;
			}
		}

		if (Y[0] > Height - DotSize)
	    	InGame = false;

		if (Y[0] < 0)
	    	InGame = false;

		if (X[0] > Width - DotSize)
	    	InGame = false;

		if (X[0] < 0)
	    	InGame = false;
	}

	public void LocateApple()
	{
		var r = RandPos;
		AppleX = r * DotSize;
	}

	public void OnKeyPress(uint val)
	{
		if (val == Gdk.Key.Left)
		{
			Left = true;
			Up = false;
			Down = false;
		}
		if (val == Gdk.Key.Right)
		{
			Right = true;
			Up = false;
			Down = false;
		}
		if (val == Gdk.Key.Up)
		{
			Right = true;
			Up = false;
			Down = false;
		}
		if (val == Gdk.Key.Down)
		{
			Down = true;
			Right = false;
			Left = false;
		}
	}
}